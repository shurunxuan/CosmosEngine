# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

strategy:
  matrix:
    linux:
      imageName: "ubuntu-16.04"
      jobName: "Build Ubuntu"
    mac:
      imageName: "macos-10.13"
      jobName: "Build macOS"
    windows:
      imageName: "windows-2019"
      jobName: "Build Windows"
  maxParallel: 3

pool:
  vmImage: $(imageName)

steps:

  - bash: sudo apt install build-essential libevent-pthreads-2.0.5 doxygen xorg-dev libglu1-mesa-dev libglm-dev
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Install build dependencies (Linux)'

  - bash: |
      git clone https://github.com/glfw/glfw.git
      cd glfw
      cmake .
      make
      sudo make install
      cd ..
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Build GLFW from source (Linux)'

  - bash: |
      wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
      sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-xenial.list http://packages.lunarg.com/vulkan/lunarg-vulkan-xenial.list
      sudo apt update
      sudo apt install vulkan-sdk
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Install Vulkan (Linux)'

  - bash: brew install glfw glm --HEAD
    condition: eq(variables['Agent.OS'], 'Darwin')
    displayName: 'Install build dependencies (macOS)'

  - bash: |
      echo $SHELL
      echo "Downloading vulkan-sdk"
      curl -s -o vulkan-sdk.tar.gz https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.tar.gz\?Human\=true
      echo "Unzipping vulkan-sdk"
      mkdir vulkan-sdk
      tar xzf vulkan-sdk.tar.gz -C ./vulkan-sdk
      cd vulkan-sdk/*
      cd macOS
      ls $HOME
      echo -n "export VULKAN_SDK=" >> $HOME/.bashrc
      pwd >> $HOME/.bashrc
      echo -n "export VK_ICD_FILENAMES=" >> $HOME/.bashrc
      echo "$VULKAN_SDK/etc/vulkan/icd.d/MoltenVK_icd.json" >> $HOME/.bashrc
      source $HOME/.bashrc
    condition: eq(variables['Agent.OS'], 'Darwin')
    displayName: 'Install Vulkan (macOS)'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: 'git clone https://github.com/Microsoft/vcpkg.git
        
        cd vcpkg
        
        .\\bootstrap-vcpkg.bat
        
        cd ..'
      errorActionPreference: 'silentlyContinue'
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'Install vcpkg (Windows)'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: 'cd vcpkg

              .\\vcpkg.exe upgrade --no-dry-run

              .\\vcpkg.exe install glfw3:x64-windows glm:x64-windows'
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'Install build dependencies (Windows)'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: '$url = "https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe?Human=true"
        
        $output = "vulkan-sdk.exe"
        
        echo "Downloading vulkan-sdk"

        Invoke-WebRequest $url -OutFile $output
        
        echo "Installing vulkan-sdk"

        .\\vulkan-sdk.exe /S | Out-Null'
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'Install Vulkan (Windows)'

  - task: CMake@1
    inputs:
      cmakeArgs: .. -DCMAKE_BUILD_TYPE=Release
    displayName: 'CMake Generate'

